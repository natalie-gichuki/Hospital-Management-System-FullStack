venv/
__pycache__/
*.pyc
*.pyo
*.pyd
Server/instance/hospital.db
Server/migrations/script.py.mako
Server/migrations/alembic.ini
Server/instance/hospital.db
Server/hospital.db
Server/instance/hospital.db
Server/migrations/versions/cbc05349d8ea_initial_migration.py
Server/instance/hospital.db
Server/migrations/versions/6de7d4e49ccb_fix_doctor_department_fk_ambiguity.py
Server/migrations/versions/ac73724fb1d3_add_appointment_date_and_status_to_.py
Server/migrations/versions/cbc05349d8ea_initial_migration.py
Server/migrations/versions/ac73724fb1d3_add_appointment_date_and_status_to_.py
Server/migrations/versions/6de7d4e49ccb_fix_doctor_department_fk_ambiguity.py
# Python / Flask
venv/
__pycache__/
*.pyc
*.pyo
*.pyd
*.egg-info/
.env

# Database
# Ignore the instance folder and any SQLite database files
Server/instance/
Server/hospital.db

# Node / React
Client/node_modules/
Client/dist/
Client/.env
Client/.env.*
Client/npm-debug.log*
Client/yarn-debug.log*
Client/yarn-error.log*

# IDE / Editor
.vscode/
.idea/
# Hospital Management System

<p align="center">
  <img src="https://user-images.githubusercontent.com/73097560/115834477-dbab4500-a447-11eb-908a-139a6edaec5c.gif" alt="project-gif" width="100%"/>
</p>

<p align="center">
  <img src="https://img.shields.io/badge/python-3.10+-blue.svg" alt="Python Version">
  <img src="https://img.shields.io/badge/flask-2.x-green.svg" alt="Flask Version">
  <img src="https://img.shields.io/badge/react-18.x-blue.svg" alt="React Version">
  <img src="https://img.shields.io/badge/license-MIT-lightgrey.svg" alt="License">
</p>

A comprehensive, full-stack web application designed to streamline hospital operations. This system provides an intuitive interface for managing patients, doctors, appointments, and departments, catering to the needs of administrators, medical staff, and patients.

## ‚ú® Features

-   **Role-Based Access Control:** Secure authentication and authorization for different user roles (Admin, Doctor, Patient).
-   **Patient Management:** Register new patients, view patient history, and manage personal records.
-   **Doctor Profiles:** Manage doctor information, specializations, and schedules.
-   **Appointment Scheduling:** Patients can book appointments with available doctors, and doctors can view their upcoming appointments.
-   **Department Management:** Admins can add, update, and manage various hospital departments.
-   **Intuitive Dashboard:** A central hub for users to view relevant information at a glance.

## üõ†Ô∏è Tech Stack

This project is a monorepo with a separate client and server.

| Area       | Technology                                                                                                                             |
| :--------- | :------------------------------------------------------------------------------------------------------------------------------------- |
| **Backend**  | [Python](https://www.python.org/), [Flask](https://flask.palletsprojects.com/), [Flask-SQLAlchemy](https://flask-sqlalchemy.palletsprojects.com/), [Flask-Migrate](https://flask-migrate.readthedocs.io/en/latest/), [Flask-CORS](https://flask-cors.readthedocs.io/en/latest/) |
| **Frontend** | [React](https://reactjs.org/), [Vite](https://vitejs.dev/), [Tailwind CSS](https://tailwindcss.com/)                                     |
| **Database** | [SQLite](https://www.sqlite.org/index.html)                                                                                            |

## üöÄ Getting Started

Follow these instructions to get a copy of the project up and running on your local machine for development and testing purposes.

### Prerequisites

Make sure you have the following installed on your system:

-   [Python](https://www.python.org/downloads/) (v3.8 or higher)
-   [Node.js](https://nodejs.org/) (v16 or higher) & npm

---

### ‚öôÔ∏è Backend Setup (Server)

1.  **Navigate to the server directory:**
    ```bash
    cd Server
    ```

2.  **Create and activate a virtual environment:**
    *   On macOS/Linux:
        ```bash
        python3 -m venv venv
        source venv/bin/activate
        ```
    *   On Windows:
        ```bash
        python -m venv venv
        .\venv\Scripts\activate
        ```

3.  **Install dependencies:**
    *(You will need to create a `requirements.txt` file first if one doesn't exist)*
    ```bash
    pip install -r requirements.txt
    ```
    *(If `requirements.txt` is missing, you can install the core packages: `pip install Flask Flask-SQLAlchemy Flask-Migrate Flask-CORS Flask-Bcrypt`)*

4.  **Set up the database:**
    *Initialize the database and apply migrations.*
    ```bash
    flask db upgrade
    ```

5.  **Run the Flask server:**
    ```bash
    flask run
    ```
    The backend API will be running on `http://127.0.0.1:5000`.

---

### üé® Frontend Setup (Client)

1.  **Navigate to the client directory from the root:**
    ```bash
    cd Client
    ```

2.  **Install dependencies:**
    ```bash
    npm install
    ```

3.  **Run the development server:**
    ```bash
    npm run dev
    ```
    The React application will be running on `http://localhost:5173` (or another port if 5173 is busy).

## ü§ù Contributing

Contributions, issues, and feature requests are welcome!

1.  Fork the Project
2.  Create your Feature Branch (`git checkout -b feature/AmazingFeature`)
3.  Commit your Changes (`git commit -m 'Add some AmazingFeature'`)
4.  Push to the Branch (`git push origin feature/AmazingFeature`)
5.  Open a Pull Request

## üìÑ License

This project is licensed under the MIT License.